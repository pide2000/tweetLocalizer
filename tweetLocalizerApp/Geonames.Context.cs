//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace tweetLocalizerApp
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class GeonamesDataEntities : DbContext
    {
        public GeonamesDataEntities()
            : base("name=GeonamesDataEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<alternateNames3> alternateNames3 { get; set; }
        public virtual DbSet<cities1000> cities1000 { get; set; }
        public virtual DbSet<cities15000> cities15000 { get; set; }
        public virtual DbSet<cities5000> cities5000 { get; set; }
        public virtual DbSet<countryCodes> countryCodes { get; set; }
        public virtual DbSet<countryinfo> countryinfo { get; set; }
        public virtual DbSet<GeoNames> GeoNames { get; set; }
        public virtual DbSet<timeZones> timeZones { get; set; }
        public virtual DbSet<admin1Codes> admin1Codes { get; set; }
        public virtual DbSet<admin2Codes> admin2Codes { get; set; }
    
        [DbFunction("GeonamesDataEntities", "getNearestCities1000")]
        public virtual IQueryable<getNearestCities1000_Result> getNearestCities1000(Nullable<double> lon, Nullable<double> lat, Nullable<int> nearestNeighboursCount)
        {
            var lonParameter = lon.HasValue ?
                new ObjectParameter("lon", lon) :
                new ObjectParameter("lon", typeof(double));
    
            var latParameter = lat.HasValue ?
                new ObjectParameter("lat", lat) :
                new ObjectParameter("lat", typeof(double));
    
            var nearestNeighboursCountParameter = nearestNeighboursCount.HasValue ?
                new ObjectParameter("nearestNeighboursCount", nearestNeighboursCount) :
                new ObjectParameter("nearestNeighboursCount", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<getNearestCities1000_Result>("[GeonamesDataEntities].[getNearestCities1000](@lon, @lat, @nearestNeighboursCount)", lonParameter, latParameter, nearestNeighboursCountParameter);
        }
    
        [DbFunction("GeonamesDataEntities", "getNearestCities15000")]
        public virtual IQueryable<getNearestCities15000_Result> getNearestCities15000(Nullable<double> lon, Nullable<double> lat, Nullable<int> nearestNeighboursCount)
        {
            var lonParameter = lon.HasValue ?
                new ObjectParameter("lon", lon) :
                new ObjectParameter("lon", typeof(double));
    
            var latParameter = lat.HasValue ?
                new ObjectParameter("lat", lat) :
                new ObjectParameter("lat", typeof(double));
    
            var nearestNeighboursCountParameter = nearestNeighboursCount.HasValue ?
                new ObjectParameter("nearestNeighboursCount", nearestNeighboursCount) :
                new ObjectParameter("nearestNeighboursCount", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<getNearestCities15000_Result>("[GeonamesDataEntities].[getNearestCities15000](@lon, @lat, @nearestNeighboursCount)", lonParameter, latParameter, nearestNeighboursCountParameter);
        }
    
        [DbFunction("GeonamesDataEntities", "getNearestCities5000")]
        public virtual IQueryable<getNearestCities5000_Result> getNearestCities5000(Nullable<double> lon, Nullable<double> lat, Nullable<int> nearestNeighboursCount)
        {
            var lonParameter = lon.HasValue ?
                new ObjectParameter("lon", lon) :
                new ObjectParameter("lon", typeof(double));
    
            var latParameter = lat.HasValue ?
                new ObjectParameter("lat", lat) :
                new ObjectParameter("lat", typeof(double));
    
            var nearestNeighboursCountParameter = nearestNeighboursCount.HasValue ?
                new ObjectParameter("nearestNeighboursCount", nearestNeighboursCount) :
                new ObjectParameter("nearestNeighboursCount", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<getNearestCities5000_Result>("[GeonamesDataEntities].[getNearestCities5000](@lon, @lat, @nearestNeighboursCount)", lonParameter, latParameter, nearestNeighboursCountParameter);
        }
    
        [DbFunction("GeonamesDataEntities", "getNearestNeighbours")]
        public virtual IQueryable<getNearestNeighbours_Result> getNearestNeighbours(Nullable<double> lon, Nullable<double> lat, Nullable<int> nearestNeighboursCount)
        {
            var lonParameter = lon.HasValue ?
                new ObjectParameter("lon", lon) :
                new ObjectParameter("lon", typeof(double));
    
            var latParameter = lat.HasValue ?
                new ObjectParameter("lat", lat) :
                new ObjectParameter("lat", typeof(double));
    
            var nearestNeighboursCountParameter = nearestNeighboursCount.HasValue ?
                new ObjectParameter("nearestNeighboursCount", nearestNeighboursCount) :
                new ObjectParameter("nearestNeighboursCount", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<getNearestNeighbours_Result>("[GeonamesDataEntities].[getNearestNeighbours](@lon, @lat, @nearestNeighboursCount)", lonParameter, latParameter, nearestNeighboursCountParameter);
        }
    }
}
